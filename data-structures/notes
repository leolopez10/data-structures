WHAT ARE DATA-STRUCTURES

Data structures are collections of values, the relationships among them, and the functions or operation that can be applied to the data.

WHY SO MANY?

Different data structures excel at different things. Some are highly specialized, while others (like arrays) ar more generally used.

WHY CARE?

The more time you spend as a developer, the more likely you'll need to use one of these data structures

Lists - Linear

Tree - nonLinear (only parent child relationship. All nodes are moving away from root node. No horizontal relationship)

ROOT - The top node in a Tree
CHILD - A node directly connected to another node when moving away from the root
PARENT - The conversion notion of a child
SIBLINGS - a group of nodes with the same parent
LEAF - a node with no children
EDGE - the connection between one node and another

Tree real world concept
    - HTML DOM
    - Network Routing
    - Abstract Syntax Trees
    - Decision Tree AI
    - Folder in others
    - computer file system
=========================================================================
Binary Search Tree
    - Every parent node has at most TWO children
    - Every node to the LEFT of a parent node is ALWAYS LESS than the parent node
    - Every node to the RIGHT of a parent node is ALWAYS GREATER than the parent node

Transverse a tree = hit every node on the tree
    - Breadth-first Search (head from left to right (work horizontal))
    - Depth-first search (Moves down the tree)
        - InOrder: 3,6,7,8,10
        - PreOrder: Go down left then right
        - PostOrder: start from the bottom and move up

BREADTH FIRST
    - lots of nodes to keep track of (on a wide tree)
    - fewer nodes to keep track of (on narrow tree)

DEPTH FIRST
    - Fewer nodes to keep track of (on a wide tree)
    - lots of nodes to keep track of (on a narrow tree)
InOrder
    - Used commonly with BST's Notice we get all nodes in the tree in their underlying order
PreOrder
    - Can be used to "export" a tree structure so that it is easily reconstructed or copied
=========================================================================

=========================================================================
BINARY HEAPS

- Binary heaps are used to implement Priority Queues, which are VERY commonly used data structures
- They are also used quite a bit, with GRAPH TRAVERSAL algorithms

- MAX heap
    - Very similar to binary search tree, but with some different rules (no order to the tree)
    - In a MaxBinaryHeap, parent nodes are always larger than child nodes.
    - Each parent has at most two child nodes
    - The value of each parent node is ALWAYS greater than its child nodes
    - A binary heap is as compact as possible. All the children of each node are as full as they can be and left children are filled out first.
- MIN heap
    - In a MinBinaryHeap, parent nodes are always smaller than child nodes


  