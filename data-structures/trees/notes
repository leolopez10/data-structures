WHAT ARE DATA-STRUCTURES

Data structures are collections of values, the relationships among them, and the functions or operation that can be applied to the data.

WHY SO MANY?

Different data structures excel at different things. Some are highly specialized, while others (like arrays) ar more generally used.

WHY CARE?

The more time you spend as a developer, the more likely you'll need to use one of these data structures

Lists - Linear

Tree - nonLinear (only parent child relationship. All nodes are moving away from root node. No horizontal relationship)

ROOT - The top node in a Tree
CHILD - A node directly connected to another node when moving away from the root
PARENT - The conversion notion of a child
SIBLINGS - a group of nodes with the same parent
LEAF - a node with no children
EDGE - the connection between one node and another

Tree real world concept
    - HTML DOM
    - Network Routing
    - Abstract Syntax Trees
    - Decision Tree AI
    - Folder in others
    - computer file system
=========================================================================
Binary Search Tree
    - Every parent node has at most TWO children
    - Every node to the LEFT of a parent node is ALWAYS LESS than the parent node
    - Every node to the RIGHT of a parent node is ALWAYS GREATER than the parent node

Transverse a tree = hit every node on the tree
    - Breadth-first Search (head from left to right (work horizontal))
    - Depth-first search (Moves down the tree)
        - InOrder: 3,6,7,8,10
        - PreOrder: Go down left then right
        - PostOrder: start from the bottom and move up

BREADTH FIRST
    - lots of nodes to keep track of (on a wide tree)
    - fewer nodes to keep track of (on narrow tree)

DEPTH FIRST
    - Fewer nodes to keep track of (on a wide tree)
    - lots of nodes to keep track of (on a narrow tree)
InOrder
    - Used commonly with BST's Notice we get all nodes in the tree in their underlying order
PreOrder
    - Can be used to "export" a tree structure so that it is easily reconstructed or copied
=========================================================================

=========================================================================
BINARY HEAPS

- Binary heaps are used to implement Priority Queues, which are VERY commonly used data structures
- They are also used quite a bit, with GRAPH TRAVERSAL algorithms
- Binary Heaps are very useful data structures for sorting, and implementing other data structures like priority queues
- Binary Heaps are either MaxBinaryHeaps or MinBinaryHeaps with parents either being smaller or larger than their children
- With just a little bit of math, we can represent heaps using arrays

- MAX heap
    - Very similar to binary search tree, but with some different rules (no order to the tree)
    - In a MaxBinaryHeap, parent nodes are always larger than child nodes.
    - Each parent has at most two child nodes
    - The value of each parent node is ALWAYS greater than its child nodes
    - A binary heap is as compact as possible. All the children of each node are as full as they can be and left children are filled out first.
- MIN heap
    - In a MinBinaryHeap, parent nodes are always smaller than child nodes
=========================================================================

=========================================================================
PRIORITY QUEUE

- A data structure where each element has a priority. Elements with higher priorities are served before elements with lower priorities
=========================================================================

=========================================================================
HASH TABLE (come back to this)

- Hash tables are used to store KEY-VALUE pairs
- They are like arrays, ut the keys are not ordered.
- Unlike arrays, hash tables are fast for all of the following operations: finding values, adding new values, and removing values
- JavaScript has Objects and Maps they are hash tables
=========================================================================

=========================================================================
GRAPHS

- nodes + connections
- a finite set of vertices or nodes together with a set of pairs of these vertices for an undirected Graph or a set of ordered pairs for a directed graph

USED FOR

- Social Networks
- Location / Mapping
- Routing algorithms
- Visual Hierarchy
- File System Optimizations
- Recommendations
    - People also watched
    - You might also like..
    - People you might know
    - Frequently bought with

GRAPH TERMS

- Vertex: a node
- Edge: connection between nodes
- Weighted/Unweighted: values assigned to distances between vertices
- Undirected Graph: two way connections (like a doubly linked list)
- Direct Graph: one way connection. direction is given to an edge (like a singly linked list)
- Weighted: each edge has a value assigned to it
- Unweighted: edge does not have a value assigned to it
- Graphs are stored in a matrix, List, or hash table
- If you don't have a lot of edges use a list or hash table 

ADJACENCY LIST

- Can take up less space (in sparse graphs (less connections))
- Faster to iterate over all edges
-- Can be Slower to lookup specific edge

ADJACENCY MATRIX

-- Takes up more space (in sparse graphs (less connections))
-- Slower to iterate over all edges
- Faster to look up specific edge
=========================================================================

=========================================================================
TRAVERSING A GRAPH

- Visiting/Updating/Checking each vertex in a graph

USES

- Peer to peer networking
- Web Crawlers
- Finding "closest" matches/recommendations
- Shortest path problems
    - GPS Navigation
    - Salving mazes
    - AI(shortest path to win the game)
=========================================================================